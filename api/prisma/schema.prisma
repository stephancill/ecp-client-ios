generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                @id @default(cuid())
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  approvals          Approval[]
  notificationEvents NotificationEvent[]
  notifications      NotificationDetails[]
  postSubscriptions  PostSubscription[]

  @@map("users")
}

model NotificationDetails {
  id          String   @id @default(cuid())
  userId      String
  deviceToken String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceToken])
  @@index([userId])
  @@map("notifications")
}

model Approval {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    String
  app       String
  chainId   Int
  txHash    String
  logIndex  Int
  deletedAt DateTime?
  user      User      @relation(fields: [app], references: [id], onDelete: Cascade)

  @@unique([author, app, chainId], name: "author_app_chainId")
  @@index([app])
  @@index([author])
  @@index([chainId])
  @@map("approvals")
}

model NotificationEvent {
  id               String           @id @default(cuid())
  userId           String
  title            String
  body             String
  badge            Int?
  sound            String?
  data             Json?
  createdAt        DateTime         @default(now())
  chainId          Int?
  groupKey         String?
  originAddress    String?
  parentCommentId  String?
  reactionType     String?
  subjectCommentId String?
  targetCommentId  String?
  type             NotificationType @default(system)
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([type])
  @@index([originAddress])
  @@index([targetCommentId])
  @@index([targetCommentId, reactionType])
  @@map("notification_events")
}

enum NotificationType {
  reply
  reaction
  mention
  follow
  system
  post
}

model PostSubscription {
  id            String   @id @default(cuid())
  userId        String
  targetAuthor  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetAuthor])
  @@index([targetAuthor])
  @@index([userId])
  @@map("post_subscriptions")
}
